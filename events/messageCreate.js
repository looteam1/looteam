const db = require("croxydb");
const { PermissionFlagsBits, EmbedBuilder, Events, PermissionsBitField  } = require("discord.js");
const Discord = require("discord.js")

module.exports = {
    name: "messageCreate",
    once: false,
    run: async (client, message) => {
        try {
            if (message.author.bot) return;
            if (!message.guild) return;

            const xp = db.fetch(`xpPos_${message.author.id}${message.guild.id}`);
            const levellog = db.fetch(`level_log_${message.guild.id}`);
            const level = db.fetch(`levelPos_${message.author.id}${message.guild.id}`);

            const acikmi = db.fetch(`acikmiLevel_${message.guild.id}`) ? true : false;
            if (acikmi) {
				if (xp >= 99) {
                    db.subtract(`xpPos_${message.author.id}${message.guild.id}`, xp);
                    db.add(`levelPos_${message.author.id}${message.guild.id}`, 1);

                    client.channels.cache.get(levellog).send(`${message.author} GG!, artƒ±k yeni seviyene ula≈ütƒ±n, tebrikler! Yeni seviyen: **${level + 1}**`);
                } else {
                    db.add(`xpPos_${message.author.id}${message.guild.id}`, 1);
                }
            }

            if (await db.get(`afk_${message.author.id}`)) {
                const afkDate = db.fetch(`afkDate_${message.author.id}`);
                const sebep = db.fetch(`afk_${message.author.id}`);

                if (afkDate && sebep) {
                    const date = `${message.author} Ho≈ü geldin! **${sebep}** sebebiyle <t:${parseInt(afkDate.date / 1000)}:R> afk'ydƒ±n`;
                    db.delete(`afk_${message.author.id}`);
                    db.delete(`afkDate_${message.author.id}`);

                    message.reply(date);
                }
            }

            const kullanƒ±cƒ± = message.mentions.users.first();
            if (kullanƒ±cƒ±) {
                const afkDate = db.fetch(`afkDate_${kullanƒ±cƒ±.id}`);
                const sebep = await db.get(`afk_${kullanƒ±cƒ±.id}`);

                if (sebep) {
                    const sebeps = `‚ùî | Etiketlediƒüin kullanƒ±cƒ± **${sebep}** sebebiyle afk modunda!`;
                    message.reply(sebeps);
                }
            }

            const kufur = db.fetch(`kufurengel_${message.guild.id}`);

            if (kufur) {
                const kufurler = ["sikik","sike","sikey","sikeyi","amk", "pi√ß", "yarrak", "o√ß", "g√∂t", "amq", "yav≈üak", "amcƒ±k", "amcƒ±", "orospu", "sikim", "sikeyim", "aq", "mk", "oruspu √ßocugu", "√ßocugu", "ananƒ±", "sƒ±kƒ±m", "amcƒ±k", "yar", "oruspu"," baban jigolo", "aile boyu orospunuz", "ailen fahi≈ülere klub√º", "ailen o√ß", "ailen oropular konseyi", "ailen yarraƒüƒ±ma baƒüƒ±mlƒ±", "ailen yav≈üak mƒ±", "ailene boydan gireyim", "ailene gibtir git", "ailene g√∂tten gireyim", "ailene matkapla gireyim", "ailene tornavida ile gireyim", "aileni g√∂tten sikerim", "aileni ƒ±slak sopayla sikeyim", "aileni k√∂kten sikerim", "aileni kucakta aneni yatakta", "aileni sikeyim", "aileni siktim √∂ld√º", "aileni siqem", "aileni toplu sikeirm", "aileni yarrakla sikerim", "ailenin aƒüƒ±zƒ±na sƒ±√ßayƒ±m", "ailenin amƒ±na koyayƒ±m", "ailenin amk", "ailenle toplu seks edem", "Allah o√ß", "Allah orospu", "Allah yav≈üak", "Allah yedim √∂ld√º", "Allahƒ± sikeyim", "Allahƒ± siktim √∂ld√º", "Allahƒ±n amk", "Allahƒ±nƒ± sikerim", "Allahƒ±nƒ± sikeyim", "Allah'ƒ±nƒ± sikeyim", "Allahini sikeyim", "Allah'ini sikeyim", "amƒ±nakoduƒüum ailesizi", "amk veledi ailene git", "anan aramƒ±≈ü sikilmesi gerek", "anan baƒüƒ±mlƒ±m ama yarak", "anan bar fahi≈üesi", "anan benim zuckeri istiyor", "anan bilir", "anan eskort", "anan esxort", "anan fahi≈üe", "anan fuck", "anan fuck it", "anan fuck itlerim"];
                if (kufurler.some((word) => message.content.toLowerCase().includes(word))) {
                  if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                    message.delete();
                    const embed = new EmbedBuilder()
                      .setTitle(`‚ùó **UYARI!**`)
                      .setDescription(`‚úã | ${message.author}, K√ºf√ºr etmeye devam edersen banlanacaksƒ±n!`);
                    const msg = await message.channel.send({ embeds: [embed] });
                    if (msg) setTimeout(() => msg.delete(), 5000);
                  }
                }
              }

            const reklamlar = db.fetch(`reklamengel_${message.guild.id}`);

            if (reklamlar) {
                const linkler = [".com.tr", ".net", ".org", ".tk", ".cf", ".gf", "https://", ".gq", "http://", ".com", ".gg", ".porn", ".edu"];

                if (linkler.some(alo => message.content.toLowerCase().includes(alo))) {
                    if (message.member.permissions.has(PermissionsBitField.Flags.Administrator)) return;
                    if (message.author.bot) return;

                    message.delete();
                    const embed = new EmbedBuilder()
                    .setTitle(`‚ùó **UYARI!**`)
                    .setDescription(`‚úã | ${message.author}, Reklam atmaya devam edersen banlanacaksƒ±n!`);
                const msg = await message.channel.send({ embeds: [embed] });
                if (msg) setTimeout(() => msg.delete(), 5000);
                }
            }

            const kanal = db.get(`g√∂rselengel.${message.guild.id}`);
            if (message.channel.id == kanal) {
                if (!message.attachments.first()) {
                    if (message.member.permissions.has(PermissionsBitField.Flags.Administrator)) return;
                    if (message.author.bot) return;

                    message.delete();
                    const msg = await message.channel.send(`${message.author}, Bu Kanalda Sadece GIF & Resim Atabilirsiniz.`);
                    if (msg) setTimeout(() => msg.delete(), 5000);
                }
            }

            const data = db.fetch(`yasaklƒ±_kelime_${message.guild.id}`);
            if (data) {
                if (message.member.permissions.has(PermissionsBitField.Flags.Administrator)) return;
                if (message.author.bot) return;
                if (data.includes(message.content)) {
                    message.delete();
                    const embed = new EmbedBuilder()
                    .setTitle(`‚ùó **UYARI!**`)
                    .setDescription(`‚úã | ${message.author}, Yasaklƒ± Kelime Kulanmayƒ±nƒ±z!`);
                const msg = await message.channel.send({ embeds: [embed] });
                if (msg) setTimeout(() => msg.delete(), 5000);
                }
            }

            const saas = db.fetch(`saas_${message.guild.id}`);

            if (saas) {
                const selaamlar = message.content.toLowerCase();
                if (selaamlar === 'sa' || selaamlar === 'slm' || selaamlar === 'sea' || selaamlar === ' selam√ºnaleyk√ºm' || selaamlar === 'selam√ºn aleyk√ºm' || selaamlar === 'selam') {
                    message.channel.send(`<@${message.author.id}> as cnm la naber üòã`);
                }
            }

            if (message.content.length > 4) {
                if (db.fetch(`capslockengel_${message.guild.id}`)) {
                    const caps = message.content.toUpperCase();
                    if (message.content === caps) {
                        if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
                            if (!message.mentions.users.first()) {
                                message.delete();
                                const embed = new EmbedBuilder()
                                    .setTitle(`‚ùó **UYARI!**`)
                                    .setDescription(`‚úã | ${message.author}, Bu sunucuda b√ºy√ºk harf kullanƒ±mƒ± engelleniyor!`);
                                const msg = await message.channel.send({ embeds: [embed] });
                                if (msg) setTimeout(() => msg.delete(), 5000);
                            }
                        }
                    }
                }
            }
        } catch (err) {
            console.error('An error occurred:', err);
        }
    }
};
